(()=>{"use strict";const t=skyrimPlatform;var e,r,a,i,o,c,n,h,f,s={'"':'\\"',"'":"\\'","\\":"\\\\","<":"\\<",">":"\\>"},g=/[&<>"'\\\/]/;!function(t){t[t.Fist=0]="Fist",t[t.Sword=1]="Sword",t[t.Dagger=2]="Dagger",t[t.WarAxe=3]="WarAxe",t[t.Mace=4]="Mace",t[t.Greatsword=5]="Greatsword",t[t.Battleaxe=6]="Battleaxe",t[t.Warhammer=6]="Warhammer",t[t.Bow=7]="Bow",t[t.Staff=8]="Staff",t[t.Crossbow=9]="Crossbow"}(e||(e={})),function(t){t.Fist="hitFistPlayer",t.Sword="hitSwordPlayer",t.Dagger="hitDaggerPlayer",t.WarAxe="hitWarAxePlayer",t.Mace="hitMacePlayer",t.Greatsword="hitGreatswordPlayer",t.Battleaxe="hitBattleAxeWarhammerPlayer",t.Warhammer="hitBattleAxeWarhammerPlayer",t.Bow="hitBowPlayer",t.Staff="hitStaffPlayer",t.Crossbow="hitCrossbowPlayer"}(r||(r={})),function(t){t.Fist="hitPowerAttackFistPlayer",t.Sword="hitPowerAttackSwordPlayer",t.Dagger="hitPowerAttackDaggerPlayer",t.WarAxe="hitPowerAttackWarAxePlayer",t.Mace="hitPowerAttackMacePlayer",t.Greatsword="hitPowerAttackGreatswordPlayer",t.Battleaxe="hitPowerAttackBattleAxeWarhammerPlayer",t.Warhammer="hitPowerAttackBattleAxeWarhammerPlayer",t.Staff="hitPowerAttackStaffPlayer"}(a||(a={})),function(t){t.Fist="hitFistNpc",t.Sword="hitSwordNpc",t.Dagger="hitDaggerNpc",t.WarAxe="hitWarAxeNpc",t.Mace="hitMaceNpc",t.Greatsword="hitGreatswordNpc",t.Battleaxe="hitBattleAxeWarhammerNpc",t.Warhammer="hitBattleAxeWarhammerNpc",t.Bow="hitBowNpc",t.Staff="hitStaffNpc",t.Crossbow="hitCrossbowNpc"}(i||(i={})),function(t){t.Fist="hitPowerAttackFistNpc",t.Sword="hitPowerAttackSwordNpc",t.Dagger="hitPowerAttackDaggerNpc",t.WarAxe="hitPowerAttackWarAxeNpc",t.Mace="hitPowerAttackMaceNpc",t.Greatsword="hitPowerAttackGreatswordNpc",t.Battleaxe="hitPowerAttackBattleAxeWarhammerNpc",t.Warhammer="hitPowerAttackBattleAxeWarhammerNpc",t.Staff="hitPowerAttackStaffNpc"}(o||(o={})),function(t){t.Fist="hitFistNpcDW",t.Sword="hitSwordNpcDW",t.Dagger="hitDaggerNpcDW",t.WarAxe="hitWarAxeNpcDW",t.Mace="hitMaceNpcDW"}(c||(c={})),function(t){t.Fist="hitFistPlayerDW",t.Sword="hitSwordPlayerDW",t.Dagger="hitDaggerPlayerDW",t.WarAxe="hitWarAxePlayerDW",t.Mace="hitMacePlayerDW"}(n||(n={})),function(t){t.Fist="hitPowerAttackFistPlayerDW",t.Sword="hitPowerAttackSwordPlayerDW",t.Dagger="hitPowerAttackDaggerPlayerDW",t.WarAxe="hitPowerAttackWarAxePlayerDW",t.Mace="hitPowerAttackMacePlayerDW"}(h||(h={})),function(t){t.Fist="hitPowerAttackFistNpcDW",t.Sword="hitPowerAttackSwordNpcDW",t.Dagger="hitPowerAttackDaggerNpcDW",t.WarAxe="hitPowerAttackWarAxeNpcDW",t.Mace="hitPowerAttackMaceNpcDW"}(f||(f={}));var p,l,A,w,F,P,k,m,W,D,S,u,y={powAtk:{npc:Object.create(o),player:Object.create(a)},regAtk:{npc:Object.create(i),player:Object.create(r)}},d={powAtk:{npc:Object.create(f),player:Object.create(h)},regAtk:{npc:Object.create(c),player:Object.create(n)}};function x(e){var r=t.Game.getFormEx(e);return t.Actor.from(r)}function N(e,r){t.Debug.sendAnimationEvent(e,r)}!function(t){t.Fire="hitFireEffectNovice",t.Frost="hitFrostEffectNovice",t.Shock="hitShockEffectNovice"}(p||(p={})),function(t){t.Fire="hitFireEffectApprentice",t.Frost="hitFrostEffectApprentice",t.Shock="hitShockEffectApprentice"}(l||(l={})),function(t){t.Fire="hitFireEffectAdept",t.Frost="hitFrostEffectAdept",t.Shock="hitShockEffectAdept"}(A||(A={})),function(t){t.Fire="hitFireEffectExpert",t.Frost="hitFrostEffectExpert",t.Shock="hitShockEffectExpert"}(w||(w={})),function(t){t.Fire="hitFireEffectMaster",t.Frost="hitFrostEffectMaster",t.Shock="hitShockEffectMaster"}(F||(F={})),function(t){t.Fire="hitFireEffectConcentration",t.Frost="hitFrostEffectConcentration",t.Shock="hitShockEffectConcentration"}(P||(P={})),function(t){t.Fire="hitFireEffectConcentrationEnd",t.Frost="hitFrostEffectConcentrationEnd",t.Shock="hitShockEffectConcentrationEnd"}(k||(k={})),function(t){t.MagicDamageFrost="MagicDamageFrost",t.MagicDamageShock="MagicDamageShock",t.MagicDamageFire="MagicDamageFire",t.MagicRune="MagicRune"}(m||(m={})),function(t){t.Frost="Frost Damage",t.Fire="Fire Damage",t.Shock="Shock Damage"}(W||(W={})),function(t){t.Frost="Frost",t.Fire="Fire",t.Shock="Shock"}(D||(D={})),function(t){t[t.Novice=0]="Novice",t[t.Apprentice=25]="Apprentice",t[t.Adept=50]="Adept",t[t.Expert=75]="Expert",t[t.Master=100]="Master"}(S||(S={}));var E=t.settings["weapon-type-hit"].isPlayerReactionEnabled;(0,t.on)("hit",(function(r){if(r.aggressor&&r.target){var a=t.Game.getPlayer(),i=function(t){return x(t.target.getFormID())}(r),o=(r.target.getFormID().toString(),function(t){return x(t.aggressor.getFormID())}(r));if(t.WornObject,!(i&&i.getAnimationVariableBool("IsBlocking")||i&&i.getAnimationVariableBool("bIdlePlaying")||o===a&&i.isPlayerTeammate()||i===t.Game.getPlayer()&&!1===E||i&&i.isInKillMove()||o&&o.isInKillMove()||41!==r.source.getType())){var c=o.getEquippedWeapon(!1),n=o.getEquippedWeapon(!0),h=o.getEquippedSpell(0),f=o.getEquippedSpell(1),s=c?c.getWeaponType():e.Fist,g=n?n.getWeaponType():e.Fist;u=s!==g||h||f?r.isPowerAttack?y.powAtk:y.regAtk:r.isPowerAttack?d.powAtk:d.regAtk;var p=function(t,r,a,i){return 0===t.source.getName().length?"Fist":r&&t.source.getName()===r.getName()?e[a]:e[i]}(r,c,s,g);!function(e,r,a,i,o){!function(e){var r;return e.target.getFormID()!==(null===(r=t.Game.getPlayer())||void 0===r?void 0:r.getFormID())}(e)?N(r,a.player[i]+o):N(r,a.npc[i]+o)}(r,i,u,p,"")}}})),(0,t.on)("consoleMessage",(function(e){var r=e.message.replace(g,(function(t){return s[t]}));t.browser.executeJavaScript('console.table("'+r+'")')}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,